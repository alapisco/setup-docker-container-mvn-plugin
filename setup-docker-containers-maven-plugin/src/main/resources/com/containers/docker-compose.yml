version: '2'
services:

    cassandra.test:
      image: "cassandra:3.11"
      ports:
       - "9042:9042"
      hostname: "cassandra.test"
      container_name: "cassandra.test"
      environment:
        CASSANDRA_CLIENT_PORT: "9042"
      networks:
       - ${NETWORK_NAME}

    elasticsearch.test:
      image: "elasticsearch:2.4.1"
      ports:
       - "9200:9200"
       - "9300:9300"
      hostname: "elasticsearch.test"
      container_name: "elasticsearch.test"
      command: "plugin install delete-by-query"
      command: "elasticsearch -Des.http.publish_host=127.0.0.1
                              -Des.http.port=9200
                              -Des.transport.tcp.port=9300
                              -Des.transport.host=127.0.0.1
                              -Des.http.host=0.0.0.0
                              -Des.xpack.security.enabled=false
                              -Des.cluster.name=dev-elasticsearch-partnerapis
                              -Des.discovery.zen.ping.multicast.enabled=false
                              -Des.index.number_of_replicas=0
                              -Des.index.number_of_shards=1
                              -Des.node.master=true
                              -Des.node.name=test-node
                              -Des.discovery.zen.fd.ping_interval=1200s
                              -Des.discovery.zen.fd.ping_retries=0
                              -Des.discovery.zen.fd.ping_timeout=1s
                              -Des.discovery.zen.join_timeout=1s
                              -Des.discovery.zen.ping_timeout=1s
                              -Des.discovery.zen.publish_timeout=1s
                              -Des.http.cors.allow-origin=*
                              -Des.http.cors.enabled=true
                              -Des.script.default_lang=groovy
                              -Des.script.file=false
                              -Des.script.indexed=false
                              -Des.script.inline=false
                              -Des.transport.tcp.connect_timeout=1s"
      networks:
       - ${NETWORK_NAME}

    mongodb.test:
      image: "mongo:3.6.5"
      ports:
        - "27017:27017"
      hostname: "mongodb.test"
      container_name: "mongodb.test"
      command: "mongod ${MONGO_INIT_FLAGS}"
      networks:
        - ${NETWORK_NAME}

    zookeeper.test:
      image: "confluentinc/cp-zookeeper:3.2.1"
      ports:
        - "2181:2181"
      hostname: "zookeeper.test"
      container_name: "zookeeper.test"
      environment:
        ZOOKEEPER_CLIENT_PORT: "2181"
      networks:
        - ${NETWORK_NAME}

    kafka.test:
      image: "confluentinc/cp-kafka:3.2.1"
      depends_on:
        - zookeeper.test
      ports:
        - "39092:39092"
      hostname: "kafka.test"
      container_name: "kafka.test"
      environment:
        KAFKA_ZOOKEEPER_CONNECT: "zookeeper.test:2181"
        KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka.test:39092"
      networks:
        - ${NETWORK_NAME}

    schema-registry.test:
      image: "confluentinc/cp-schema-registry:3.2.1"
      depends_on:
        - kafka.test
      ports:
        - "8051:8051"
      hostname: "schema-registry.test"
      container_name: "schema-registry.test"
      environment:
        SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper.test:2181"
        SCHEMA_REGISTRY_HOST_NAME: "schema-registry.test"
        SCHEMA_REGISTRY_LISTENERS: "http://schema-registry.test:8051"
      networks:
        - ${NETWORK_NAME}

    start.services.test:
      build: ${DOCKER_BUILD_DIR}
      environment:
        - TIMEOUT=${TIMEOUT}
        - RETRY_INTERVAL=${RETRY_INTERVAL}
      depends_on:${SERVICES_TO_RUN}
      command: ${SERVICES_TO_RUN_WITH_PORT}
      networks:
        - ${NETWORK_NAME}

volumes:
  esdata:
    driver: local

networks:
    ${NETWORK_NAME}:
      external: true